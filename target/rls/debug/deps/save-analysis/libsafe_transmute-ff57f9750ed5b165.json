{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49],"program":"/Users/mguimara/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","safe_transmute","/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=ff57f9750ed5b165","-C","extra-filename=-ff57f9750ed5b165","--out-dir","/Users/mguimara/Desktop/tinyraycaster-rust/target/rls/debug/deps","-L","dependency=/Users/mguimara/Desktop/tinyraycaster-rust/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/mguimara/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,68,101,115,107,116,111,112,47,116,105,110,121,114,97,121,99,97,115,116,101,114,45,114,117,115,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,115,97,102,101,95,116,114,97,110,115,109,117,116,101,45,102,102,53,55,102,57,55,53,48,101,100,53,98,49,54,53,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"safe_transmute","disambiguator":[2036785838780062013,9273637449715939415]},"crate_root":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src","external_crates":[{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4680476137390187807,17118232108371533317]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[395860541893199504,14119727998271152369]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1883751235990237101,13050952199660841280]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14992191205204974336,187257134115189521]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[13711397750981643997,5466272945196031893]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[3859305508273286470,8854496368734295790]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[3472742474031782457,1873693969544132989]}}],"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":11970,"line_start":1,"line_end":347,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3644,"byte_end":3655,"line_start":113,"line_end":113,"column_start":23,"column_end":34},"alias_span":null,"name":"ErrorReason","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3657,"byte_end":3667,"line_start":113,"line_end":113,"column_start":36,"column_end":46},"alias_span":null,"name":"GuardError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3669,"byte_end":3674,"line_start":113,"line_end":113,"column_start":48,"column_end":53},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":220},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3703,"byte_end":3738,"line_start":115,"line_end":115,"column_start":26,"column_end":61},"alias_span":null,"name":"guarded_transmute_to_bytes_pod_many","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":216},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3740,"byte_end":3771,"line_start":115,"line_end":115,"column_start":63,"column_end":94},"alias_span":null,"name":"guarded_transmute_to_bytes_many","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":218},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3773,"byte_end":3803,"line_start":115,"line_end":115,"column_start":96,"column_end":126},"alias_span":null,"name":"guarded_transmute_to_bytes_pod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3805,"byte_end":3831,"line_start":115,"line_end":115,"column_start":128,"column_end":154},"alias_span":null,"name":"guarded_transmute_to_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":222},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3883,"byte_end":3913,"line_start":117,"line_end":117,"column_start":26,"column_end":56},"alias_span":null,"name":"guarded_transmute_to_bytes_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3915,"byte_end":3949,"line_start":117,"line_end":117,"column_start":58,"column_end":92},"alias_span":null,"name":"guarded_transmute_to_bytes_pod_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3973,"byte_end":3988,"line_start":119,"line_end":119,"column_start":21,"column_end":36},"alias_span":null,"name":"PodTransmutable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3990,"byte_end":4027,"line_start":119,"line_end":119,"column_start":38,"column_end":75},"alias_span":null,"name":"guarded_transmute_pod_many_permissive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4029,"byte_end":4064,"line_start":119,"line_end":119,"column_start":77,"column_end":112},"alias_span":null,"name":"guarded_transmute_pod_many_pedantic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4066,"byte_end":4096,"line_start":119,"line_end":119,"column_start":114,"column_end":144},"alias_span":null,"name":"guarded_transmute_pod_pedantic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4118,"byte_end":4144,"line_start":120,"line_end":120,"column_start":21,"column_end":47},"alias_span":null,"name":"guarded_transmute_pod_many","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4146,"byte_end":4167,"line_start":120,"line_end":120,"column_start":49,"column_end":70},"alias_span":null,"name":"guarded_transmute_pod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4214,"byte_end":4250,"line_start":122,"line_end":122,"column_start":21,"column_end":57},"alias_span":null,"name":"guarded_transmute_pod_vec_permissive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4252,"byte_end":4286,"line_start":122,"line_end":122,"column_start":59,"column_end":93},"alias_span":null,"name":"guarded_transmute_pod_vec_pedantic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4288,"byte_end":4313,"line_start":122,"line_end":122,"column_start":95,"column_end":120},"alias_span":null,"name":"guarded_transmute_pod_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4362,"byte_end":4399,"line_start":125,"line_end":125,"column_start":22,"column_end":59},"alias_span":null,"name":"guarded_transmute_bool_vec_permissive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4401,"byte_end":4436,"line_start":125,"line_end":125,"column_start":61,"column_end":96},"alias_span":null,"name":"guarded_transmute_bool_vec_pedantic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4460,"byte_end":4493,"line_start":126,"line_end":126,"column_start":22,"column_end":55},"alias_span":null,"name":"guarded_transmute_bool_permissive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4495,"byte_end":4526,"line_start":126,"line_end":126,"column_start":57,"column_end":88},"alias_span":null,"name":"guarded_transmute_bool_pedantic","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":11970,"line_start":1,"line_end":347,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":138},{"krate":0,"index":174},{"krate":0,"index":204},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":244},{"krate":0,"index":264},{"krate":0,"index":308},{"krate":0,"index":316},{"krate":0,"index":326},{"krate":0,"index":332},{"krate":0,"index":346},{"krate":0,"index":354},{"krate":0,"index":360},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380}],"decl_id":null,"docs":" This crate contains checked implementations of `transmute()`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":13414,"byte_end":13429,"line_start":27,"line_end":27,"column_start":18,"column_end":33},"name":"PodTransmutable","qualname":"::pod::PodTransmutable","value":"PodTransmutable: Copy","parent":null,"children":[],"decl_id":null,"docs":" Type that can be non-`unsafe`ly transmuted into","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":16639,"byte_end":16660,"line_start":99,"line_end":99,"column_start":8,"column_end":29},"name":"guarded_transmute_pod","qualname":"::pod::guarded_transmute_pod","value":"fn <T> (bytes: &[u8]) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Transmute a byte slice into a single instance of a POD.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":17324,"byte_end":17354,"line_start":120,"line_end":120,"column_start":8,"column_end":38},"name":"guarded_transmute_pod_pedantic","qualname":"::pod::guarded_transmute_pod_pedantic","value":"fn <T> (bytes: &[u8]) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Transmute a byte slice into a single instance of a POD.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":18056,"byte_end":18082,"line_start":142,"line_end":142,"column_start":8,"column_end":34},"name":"guarded_transmute_pod_many","qualname":"::pod::guarded_transmute_pod_many","value":"fn <T> (bytes: &[u8]) -> Result<&[T], Error>","parent":null,"children":[],"decl_id":null,"docs":" Transmute a byte slice into a single instance of a POD.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":18518,"byte_end":18555,"line_start":156,"line_end":156,"column_start":8,"column_end":45},"name":"guarded_transmute_pod_many_permissive","qualname":"::pod::guarded_transmute_pod_many_permissive","value":"fn <T> (bytes: &[u8]) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View a byte slice as a slice of a POD type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":19302,"byte_end":19337,"line_start":179,"line_end":179,"column_start":8,"column_end":43},"name":"guarded_transmute_pod_many_pedantic","qualname":"::pod::guarded_transmute_pod_many_pedantic","value":"fn <T> (bytes: &[u8]) -> Result<&[T], Error>","parent":null,"children":[],"decl_id":null,"docs":" View a byte slice as a slice of POD.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":20492,"byte_end":20517,"line_start":211,"line_end":211,"column_start":8,"column_end":33},"name":"guarded_transmute_pod_vec","qualname":"::pod::guarded_transmute_pod_vec","value":"fn <T> (bytes: Vec<u8>) -> Result<Vec<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Trasform a byte vector into a vector of POD.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":20461,"byte_end":20484,"line_start":210,"line_end":210,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":21694,"byte_end":21730,"line_start":242,"line_end":242,"column_start":8,"column_end":44},"name":"guarded_transmute_pod_vec_permissive","qualname":"::pod::guarded_transmute_pod_vec_permissive","value":"fn <T> (bytes: Vec<u8>) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Trasform a byte vector into a vector of POD.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":21663,"byte_end":21686,"line_start":241,"line_end":241,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":22619,"byte_end":22653,"line_start":269,"line_end":269,"column_start":8,"column_end":42},"name":"guarded_transmute_pod_vec_pedantic","qualname":"::pod::guarded_transmute_pod_vec_pedantic","value":"fn <T> (bytes: Vec<u8>) -> Result<Vec<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Trasform a byte vector into a vector of POD.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":22588,"byte_end":22611,"line_start":268,"line_end":268,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,98,111,111,108,46,114,115],"byte_start":24526,"byte_end":24559,"line_start":51,"line_end":51,"column_start":8,"column_end":41},"name":"guarded_transmute_bool_permissive","qualname":"::bool::guarded_transmute_bool_permissive","value":"fn (bytes: &[u8]) -> Result<&[bool], Error>","parent":null,"children":[],"decl_id":null,"docs":" View a byte slice as a slice of boolean values.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,98,111,111,108,46,114,115],"byte_start":25194,"byte_end":25225,"line_start":72,"line_end":72,"column_start":8,"column_end":39},"name":"guarded_transmute_bool_pedantic","qualname":"::bool::guarded_transmute_bool_pedantic","value":"fn (bytes: &[u8]) -> Result<&[bool], Error>","parent":null,"children":[],"decl_id":null,"docs":" View a byte slice as a slice of boolean values.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,98,111,111,108,46,114,115],"byte_start":26118,"byte_end":26155,"line_start":97,"line_end":97,"column_start":8,"column_end":45},"name":"guarded_transmute_bool_vec_permissive","qualname":"::bool::guarded_transmute_bool_vec_permissive","value":"fn (bytes: Vec<u8>) -> Result<Vec<bool>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Trasform a byte vector into a vector of bool.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,98,111,111,108,46,114,115],"byte_start":26087,"byte_end":26110,"line_start":96,"line_end":96,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,98,111,111,108,46,114,115],"byte_start":26965,"byte_end":27000,"line_start":123,"line_end":123,"column_start":8,"column_end":43},"name":"guarded_transmute_bool_vec_pedantic","qualname":"::bool::guarded_transmute_bool_vec_pedantic","value":"fn (bytes: Vec<u8>) -> Result<Vec<bool>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Transform a byte vector into a vector of bool.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,98,111,111,108,46,114,115],"byte_start":26934,"byte_end":26957,"line_start":122,"line_end":122,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":213},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":27845,"byte_end":27850,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"Guard","qualname":"::error::Error::Guard","value":"Error::Guard(GuardError)","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" The data does not respect the target type's boundaries.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":217},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28108,"byte_end":28117,"line_start":27,"line_end":27,"column_start":5,"column_end":14},"name":"Unaligned","qualname":"::error::Error::Unaligned","value":"Error::Unaligned { offset }","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" The given data slice is not properly aligned for the target type.\n It would have been properly aligned if `offset` bytes were shifted\n (discarded) from the front of the slice.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":221},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28206,"byte_end":28218,"line_start":29,"line_end":29,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::error::Error::InvalidValue","value":"Error::InvalidValue","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" The data contains an invalid value for the target type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":27769,"byte_end":27774,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Guard, Unaligned, InvalidValue}","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":221}],"decl_id":null,"docs":" A transmutation error. This type describes possible errors originating\n from operations in this crate.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":27760,"byte_end":28221,"line_start":19,"line_end":30,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":27760,"byte_end":28221,"line_start":19,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":408},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29539,"byte_end":29549,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"GuardError","qualname":"::error::GuardError","value":"GuardError { required, actual, reason }","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229}],"decl_id":null,"docs":" A slice boundary guard error, usually created by a [`Guard`](./guard/trait.Guard.html).","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29528,"byte_end":29782,"line_start":77,"line_end":84,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29528,"byte_end":29782,"line_start":77,"line_end":84,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":225},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29616,"byte_end":29624,"line_start":79,"line_end":79,"column_start":9,"column_end":17},"name":"required","qualname":"::error::GuardError::required","value":"usize","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" The required amount of bytes for transmutation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":227},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29677,"byte_end":29683,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"name":"actual","qualname":"::error::GuardError::actual","value":"usize","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" The actual amount of bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":229},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29760,"byte_end":29766,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"reason","qualname":"::error::GuardError::reason","value":"error::ErrorReason","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" Why this `required`/`actual`/`T` combo is an error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":233},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30030,"byte_end":30044,"line_start":90,"line_end":90,"column_start":5,"column_end":19},"name":"NotEnoughBytes","qualname":"::error::ErrorReason::NotEnoughBytes","value":"ErrorReason::NotEnoughBytes","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Too few bytes to fill even one instance of a type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":235},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30123,"byte_end":30135,"line_start":94,"line_end":94,"column_start":5,"column_end":17},"name":"TooManyBytes","qualname":"::error::ErrorReason::TooManyBytes","value":"ErrorReason::TooManyBytes","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Too many bytes to fill a type.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":237},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30210,"byte_end":30226,"line_start":96,"line_end":96,"column_start":5,"column_end":21},"name":"InexactByteCount","qualname":"::error::ErrorReason::InexactByteCount","value":"ErrorReason::InexactByteCount","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" The byte amount received is not the same as the type's size.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":434},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29953,"byte_end":29964,"line_start":88,"line_end":88,"column_start":10,"column_end":21},"name":"ErrorReason","qualname":"::error::ErrorReason","value":"ErrorReason::{NotEnoughBytes, TooManyBytes, InexactByteCount}","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237}],"decl_id":null,"docs":" How the type's size compares to the received byte count and the transmutation function's characteristic.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29944,"byte_end":30229,"line_start":88,"line_end":97,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":29944,"byte_end":30229,"line_start":88,"line_end":97,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30323,"byte_end":30334,"line_start":102,"line_end":102,"column_start":12,"column_end":23},"name":"description","qualname":"<ErrorReason>::description","value":"fn (self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a human readable description of the reason.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":32015,"byte_end":32041,"line_start":49,"line_end":49,"column_start":15,"column_end":41},"name":"guarded_transmute_to_bytes","qualname":"::to_bytes::guarded_transmute_to_bytes","value":"fn <T> (from: &T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Transmute a single instance of an arbitrary type into a slice of its bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":216},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":33373,"byte_end":33404,"line_start":95,"line_end":95,"column_start":15,"column_end":46},"name":"guarded_transmute_to_bytes_many","qualname":"::to_bytes::guarded_transmute_to_bytes_many","value":"fn <T> (from: &[T]) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Transmute a slice of arbitrary types into a slice of their bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":34410,"byte_end":34440,"line_start":135,"line_end":135,"column_start":8,"column_end":38},"name":"guarded_transmute_to_bytes_pod","qualname":"::to_bytes::guarded_transmute_to_bytes_pod","value":"fn <T> (from: &T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Transmute a single instance of a POD type into a slice of its bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":35836,"byte_end":35871,"line_start":179,"line_end":179,"column_start":8,"column_end":43},"name":"guarded_transmute_to_bytes_pod_many","qualname":"::to_bytes::guarded_transmute_to_bytes_pod_many","value":"fn <T> (from: &[T]) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Transmute a slice of arbitrary types into a slice of their bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":37308,"byte_end":37338,"line_start":229,"line_end":229,"column_start":15,"column_end":45},"name":"guarded_transmute_to_bytes_vec","qualname":"::to_bytes::guarded_transmute_to_bytes_vec","value":"fn <T> (mut from: Vec<T>) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Transmute a vector of arbitrary types into a vector of their bytes,\n using the same memory buffer as the former.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":37270,"byte_end":37293,"line_start":228,"line_end":228,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":38962,"byte_end":38996,"line_start":279,"line_end":279,"column_start":8,"column_end":42},"name":"guarded_transmute_to_bytes_pod_vec","qualname":"::to_bytes::guarded_transmute_to_bytes_pod_vec","value":"fn <T> (from: Vec<T>) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Transmute a vector of POD types into a vector of their bytes,\n using the same memory buffer as the former.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,116,111,95,98,121,116,101,115,46,114,115],"byte_start":38931,"byte_end":38954,"line_start":278,"line_end":278,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":244},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/util.rs","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":256}],"decl_id":null,"docs":" Module containing various utility functions.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":248},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":39393,"byte_end":39408,"line_start":10,"line_end":10,"column_start":8,"column_end":23},"name":"designalise_f32","qualname":"::util::designalise_f32","value":"fn (f: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" If the specified 32-bit float is a signaling NaN, make it a quiet NaN.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":40074,"byte_end":40089,"line_start":30,"line_end":30,"column_start":8,"column_end":23},"name":"designalise_f64","qualname":"::util::designalise_f64","value":"fn (f: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" If the specified 64-bit float is a signaling NaN, make it a quiet NaN.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"guard","qualname":"::guard","value":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/safe-transmute-0.10.1/src/guard.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":302},{"krate":0,"index":304}],"decl_id":null,"docs":" The `guard` module exposes an API for memory boundary checking.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":42788,"byte_end":42793,"line_start":69,"line_end":69,"column_start":11,"column_end":16},"name":"Guard","qualname":"::guard::Guard","value":"Guard","parent":null,"children":[{"krate":0,"index":276}],"decl_id":null,"docs":" The trait describes types which define boundary checking strategies.\n See the [module-level documentation](index.html) for more details.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":43037,"byte_end":43042,"line_start":76,"line_end":76,"column_start":8,"column_end":13},"name":"check","qualname":"::guard::Guard::check","value":"fn <T> (v: &[u8]) -> Result<(), GuardError>","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Check the size of the given byte slice against a particular type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":278},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":43209,"byte_end":43225,"line_start":82,"line_end":82,"column_start":12,"column_end":28},"name":"SingleValueGuard","qualname":"::guard::SingleValueGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Single value guard: The byte slice must have exactly enough bytes to fill a single\n instance of a type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":43753,"byte_end":43766,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"PedanticGuard","qualname":"::guard::PedanticGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Pedantic guard: The byte slice must have at least enough bytes to fill a single\n instance of a type, and should not have extraneous data.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":290},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":44498,"byte_end":44515,"line_start":126,"line_end":126,"column_start":12,"column_end":29},"name":"AllOrNothingGuard","qualname":"::guard::AllOrNothingGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" An all-or-nothing guard: The byte slice should not have extraneous data, but can be\n empty, unlike `PedanticGuard`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":296},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":45051,"byte_end":45066,"line_start":145,"line_end":145,"column_start":12,"column_end":27},"name":"SingleManyGuard","qualname":"::guard::SingleManyGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single-or-many guard: The byte slice must have at least enough bytes to fill a single\n instance of a type, and extraneous data is ignored.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":302},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":45606,"byte_end":45621,"line_start":164,"line_end":164,"column_start":12,"column_end":27},"name":"PermissiveGuard","qualname":"::guard::PermissiveGuard","value":"","parent":null,"children":[],"decl_id":null,"docs":" Permissive guard: The resulting slice would have as many instances of a type as will\n fit, rounded down. Therefore, this guard will never yield an error.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":366},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5163,"byte_end":5180,"line_start":149,"line_end":149,"column_start":15,"column_end":32},"name":"guarded_transmute","qualname":"::guarded_transmute","value":"fn <T> (bytes: &[u8]) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Transmute a byte slice into a single instance of a `Copy`able type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":368},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5928,"byte_end":5954,"line_start":173,"line_end":173,"column_start":15,"column_end":41},"name":"guarded_transmute_pedantic","qualname":"::guarded_transmute_pedantic","value":"fn <T> (bytes: &[u8]) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Transmute a byte slice into a single instance of a `Copy`able type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":370},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6748,"byte_end":6770,"line_start":199,"line_end":199,"column_start":15,"column_end":37},"name":"guarded_transmute_many","qualname":"::guarded_transmute_many","value":"fn <T> (bytes: &[u8]) -> Result<&[T], Error>","parent":null,"children":[],"decl_id":null,"docs":" View a byte slice as a slice of an arbitrary type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":372},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7302,"byte_end":7335,"line_start":216,"line_end":216,"column_start":15,"column_end":48},"name":"guarded_transmute_many_permissive","qualname":"::guarded_transmute_many_permissive","value":"fn <T> (bytes: &[u8]) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View a byte slice as a slice of an arbitrary type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":374},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8174,"byte_end":8205,"line_start":242,"line_end":242,"column_start":15,"column_end":46},"name":"guarded_transmute_many_pedantic","qualname":"::guarded_transmute_many_pedantic","value":"fn <T> (bytes: &[u8]) -> Result<&[T], Error>","parent":null,"children":[],"decl_id":null,"docs":" View a byte slice as a slice of an arbitrary type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":376},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9436,"byte_end":9457,"line_start":277,"line_end":277,"column_start":15,"column_end":36},"name":"guarded_transmute_vec","qualname":"::guarded_transmute_vec","value":"fn <T> (bytes: Vec<u8>) -> Result<Vec<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Trasform a byte vector into a vector of an arbitrary type.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9398,"byte_end":9421,"line_start":276,"line_end":276,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":378},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10683,"byte_end":10715,"line_start":311,"line_end":311,"column_start":15,"column_end":47},"name":"guarded_transmute_vec_permissive","qualname":"::guarded_transmute_vec_permissive","value":"fn <T> (mut bytes: Vec<u8>) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Trasform a byte vector into a vector of an arbitrary type.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10645,"byte_end":10668,"line_start":310,"line_end":310,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":380},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11804,"byte_end":11834,"line_start":344,"line_end":344,"column_start":15,"column_end":45},"name":"guarded_transmute_vec_pedantic","qualname":"::guarded_transmute_vec_pedantic","value":"fn <T> (bytes: Vec<u8>) -> Result<Vec<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Trasform a byte vector into a vector of an arbitrary type.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11766,"byte_end":11789,"line_start":343,"line_end":343,"column_start":1,"column_end":24}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28265,"byte_end":28270,"line_start":33,"line_end":33,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28546,"byte_end":28551,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28901,"byte_end":28906,"line_start":53,"line_end":53,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30237,"byte_end":30248,"line_start":100,"line_end":100,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30674,"byte_end":30684,"line_start":112,"line_end":112,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30788,"byte_end":30798,"line_start":118,"line_end":118,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":43243,"byte_end":43259,"line_start":84,"line_end":84,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":43784,"byte_end":43797,"line_start":103,"line_end":103,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":44533,"byte_end":44550,"line_start":128,"line_end":128,"column_start":16,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":45084,"byte_end":45099,"line_start":147,"line_end":147,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":45639,"byte_end":45654,"line_start":166,"line_end":166,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3600,"byte_end":3604,"line_start":110,"line_end":110,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":244}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3614,"byte_end":3619,"line_start":111,"line_end":111,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":264}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,112,111,100,46,114,115],"byte_start":13431,"byte_end":13435,"line_start":27,"line_end":27,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1682},"to":{"krate":0,"index":32}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28265,"byte_end":28270,"line_start":33,"line_end":33,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":382},"to":{"krate":1,"index":2452}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28546,"byte_end":28551,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":382},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":28901,"byte_end":28906,"line_start":53,"line_end":53,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":382},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30237,"byte_end":30248,"line_start":100,"line_end":100,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":434},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30674,"byte_end":30684,"line_start":112,"line_end":112,"column_start":19,"column_end":29},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":408},"to":{"krate":1,"index":2452}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":30788,"byte_end":30798,"line_start":118,"line_end":118,"column_start":23,"column_end":33},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":408},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":43243,"byte_end":43259,"line_start":84,"line_end":84,"column_start":16,"column_end":32},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":278},"to":{"krate":0,"index":274}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":43784,"byte_end":43797,"line_start":103,"line_end":103,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":284},"to":{"krate":0,"index":274}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":44533,"byte_end":44550,"line_start":128,"line_end":128,"column_start":16,"column_end":33},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":290},"to":{"krate":0,"index":274}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":45084,"byte_end":45099,"line_start":147,"line_end":147,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":296},"to":{"krate":0,"index":274}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,97,102,101,45,116,114,97,110,115,109,117,116,101,45,48,46,49,48,46,49,47,115,114,99,47,103,117,97,114,100,46,114,115],"byte_start":45639,"byte_end":45654,"line_start":166,"line_end":166,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":302},"to":{"krate":0,"index":274}}]}