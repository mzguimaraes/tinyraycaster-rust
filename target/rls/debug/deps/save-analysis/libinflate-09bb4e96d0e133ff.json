{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53],"program":"/Users/mguimara/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","inflate","/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=09bb4e96d0e133ff","-C","extra-filename=-09bb4e96d0e133ff","--out-dir","/Users/mguimara/Desktop/tinyraycaster-rust/target/rls/debug/deps","-L","dependency=/Users/mguimara/Desktop/tinyraycaster-rust/target/rls/debug/deps","--extern","adler32=/Users/mguimara/Desktop/tinyraycaster-rust/target/rls/debug/deps/libadler32-d2bc9daf924aaaa3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/mguimara/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,68,101,115,107,116,111,112,47,116,105,110,121,114,97,121,99,97,115,116,101,114,45,114,117,115,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,105,110,102,108,97,116,101,45,48,57,98,98,52,101,57,54,100,48,101,49,51,51,102,102,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"inflate","disambiguator":[12959713577694657793,9825114238731289206]},"crate_root":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src","external_crates":[{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4680476137390187807,17118232108371533317]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[395860541893199504,14119727998271152369]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1883751235990237101,13050952199660841280]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14992191205204974336,187257134115189521]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[13711397750981643997,5466272945196031893]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[3859305508273286470,8854496368734295790]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[3472742474031782457,1873693969544132989]}},{"file_name":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","num":8,"id":{"name":"adler32","disambiguator":[13720167523516924330,8268069081053245654]}}],"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":432,"byte_end":42253,"line_start":10,"line_end":1039,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2877,"byte_end":2890,"line_start":77,"line_end":77,"column_start":24,"column_end":37},"alias_span":null,"name":"InflateWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2927,"byte_end":2940,"line_start":80,"line_end":80,"column_start":23,"column_end":36},"alias_span":null,"name":"inflate_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2942,"byte_end":2960,"line_start":80,"line_end":80,"column_start":38,"column_end":56},"alias_span":null,"name":"inflate_bytes_zlib","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2962,"byte_end":2992,"line_start":80,"line_end":80,"column_start":58,"column_end":88},"alias_span":null,"name":"inflate_bytes_zlib_no_checksum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3031,"byte_end":3045,"line_start":83,"line_end":83,"column_start":24,"column_end":38},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3047,"byte_end":3064,"line_start":83,"line_end":83,"column_start":40,"column_end":57},"alias_span":null,"name":"DeflateDecoderBuf","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":432,"byte_end":42253,"line_start":10,"line_end":1039,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/mguimara/.cargo/registry/src/github.com-1ecc6299db9ec823/inflate-0.4.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":92},{"krate":0,"index":100},{"krate":0,"index":192},{"krate":0,"index":198},{"krate":0,"index":298},{"krate":0,"index":302},{"krate":0,"index":300},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254}],"decl_id":null,"docs":" A [DEFLATE](http://www.gzip.org/zlib/rfc-deflate.html) decoder written in rust.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45001,"byte_end":45014,"line_start":22,"line_end":22,"column_start":12,"column_end":25},"name":"InflateWriter","qualname":"::writer::InflateWriter","value":"InflateWriter {  }","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":33}],"decl_id":null,"docs":" A DEFLATE decoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45118,"byte_end":45121,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateWriter<W>>::new","value":"fn (w: W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45236,"byte_end":45245,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateWriter<W>>::from_zlib","value":"fn (w: W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45366,"byte_end":45372,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"finish","qualname":"<InflateWriter<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,117,116,105,108,115,46,114,115],"byte_start":47955,"byte_end":47968,"line_start":34,"line_end":34,"column_start":8,"column_end":21},"name":"inflate_bytes","qualname":"::utils::inflate_bytes","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed data.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,117,116,105,108,115,46,114,115],"byte_start":48230,"byte_end":48248,"line_start":41,"line_end":41,"column_start":8,"column_end":26},"name":"inflate_bytes_zlib","qualname":"::utils::inflate_bytes_zlib","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,117,116,105,108,115,46,114,115],"byte_start":48569,"byte_end":48599,"line_start":49,"line_end":49,"column_start":8,"column_end":38},"name":"inflate_bytes_zlib_no_checksum","qualname":"::utils::inflate_bytes_zlib_no_checksum","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data,\n without calculating and validating the checksum.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":51033,"byte_end":51050,"line_start":32,"line_end":32,"column_start":12,"column_end":29},"name":"DeflateDecoderBuf","qualname":"::reader::DeflateDecoderBuf","value":"DeflateDecoderBuf {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" A DEFLATE decoder/decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":51571,"byte_end":51574,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoderBuf<R>>::new","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Deflatedecoderbuf` to read from a raw deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":51920,"byte_end":51929,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<DeflateDecoderBuf<R>>::from_zlib","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":52338,"byte_end":52359,"line_start":70,"line_end":70,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<DeflateDecoderBuf<R>>::from_zlib_no_checksum","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n without calculating and validating the checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":52906,"byte_end":52911,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoderBuf<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the decompressor, and replaces the current inner `BufRead` instance by `r`.\n without doing any extra reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":52885,"byte_end":52894,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53202,"byte_end":53212,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoderBuf<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the decoder, but continue to read from the same reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53181,"byte_end":53190,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53358,"byte_end":53365,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoderBuf<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `BufRead` instance.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53337,"byte_end":53346,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53638,"byte_end":53645,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoderBuf<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying `BufRead` instance.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53617,"byte_end":53626,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53879,"byte_end":53889,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoderBuf<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Drops the decoder and return the inner `BufRead` instance.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":53858,"byte_end":53867,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54032,"byte_end":54040,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoderBuf<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total bytes read from the underlying `BufRead` instance.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54011,"byte_end":54020,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54179,"byte_end":54188,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoderBuf<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54158,"byte_end":54167,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54414,"byte_end":54430,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<DeflateDecoderBuf<R>>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54393,"byte_end":54402,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":58150,"byte_end":58164,"line_start":233,"line_end":233,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::reader::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":63}],"decl_id":null,"docs":" A DEFLATE decoder/decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":58403,"byte_end":58406,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Deflatedecoderbuf` to read from a raw deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":58648,"byte_end":58657,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<DeflateDecoder<R>>::from_zlib","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":58962,"byte_end":58983,"line_start":255,"line_end":255,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<DeflateDecoder<R>>::from_zlib_no_checksum","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n without calculating and validating the checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":59393,"byte_end":59398,"line_start":266,"line_end":266,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the decompressor, and replaces the current inner `BufRead` instance by `r`.\n without doing any extra reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":59372,"byte_end":59381,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":59566,"byte_end":59573,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":59545,"byte_end":59554,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":59852,"byte_end":59859,"line_start":281,"line_end":281,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":59831,"byte_end":59840,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60022,"byte_end":60032,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60001,"byte_end":60010,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60310,"byte_end":60320,"line_start":297,"line_end":297,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the decoder, but continue to read from the same reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60289,"byte_end":60298,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60463,"byte_end":60471,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total bytes read from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60442,"byte_end":60451,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60616,"byte_end":60625,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60595,"byte_end":60604,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60857,"byte_end":60873,"line_start":317,"line_end":317,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<DeflateDecoder<R>>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60836,"byte_end":60845,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":252},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19690,"byte_end":19703,"line_start":553,"line_end":553,"column_start":12,"column_end":25},"name":"InflateStream","qualname":"::InflateStream","value":"InflateStream {  }","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19972,"byte_end":19975,"line_start":565,"line_end":565,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateStream>::new","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding raw deflate encoded data.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19874,"byte_end":19893,"line_start":563,"line_end":563,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20301,"byte_end":20310,"line_start":572,"line_end":572,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateStream>::from_zlib","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding deflate encoded data with a zlib header and footer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20689,"byte_end":20710,"line_start":580,"line_end":580,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<InflateStream>::from_zlib_no_checksum","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding deflate encoded data with a zlib header and footer","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20845,"byte_end":20850,"line_start":584,"line_end":584,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateStream>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21038,"byte_end":21051,"line_start":591,"line_end":591,"column_start":12,"column_end":25},"name":"reset_to_zlib","qualname":"<InflateStream>::reset_to_zlib","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40949,"byte_end":40955,"line_start":1003,"line_end":1003,"column_start":12,"column_end":18},"name":"update","qualname":"<InflateStream>::update","value":"fn <'a> (&'a mut self, mut data: &[u8]) -> Result<(usize, &'a [u8]), String>","parent":null,"children":[],"decl_id":null,"docs":" Try to uncompress/decode the data in `data`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42175,"byte_end":42191,"line_start":1036,"line_end":1036,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<InflateStream>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,99,104,101,99,107,115,117,109,46,114,115],"byte_start":42813,"byte_end":42821,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45088,"byte_end":45101,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45715,"byte_end":45728,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":51461,"byte_end":51478,"line_start":45,"line_end":45,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":52634,"byte_end":52651,"line_start":81,"line_end":81,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54527,"byte_end":54544,"line_start":144,"line_end":144,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":58296,"byte_end":58310,"line_start":238,"line_end":238,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60108,"byte_end":60122,"line_start":292,"line_end":292,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60960,"byte_end":60974,"line_start":322,"line_end":322,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7029,"byte_end":7038,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11052,"byte_end":11068,"line_start":323,"line_end":323,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14184,"byte_end":14196,"line_start":413,"line_end":413,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19854,"byte_end":19867,"line_start":562,"line_end":562,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":294},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,99,104,101,99,107,115,117,109,46,114,115],"byte_start":42813,"byte_end":42821,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45088,"byte_end":45101,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":45715,"byte_end":45728,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":58},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":51461,"byte_end":51478,"line_start":45,"line_end":45,"column_start":18,"column_end":35},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":52634,"byte_end":52651,"line_start":81,"line_end":81,"column_start":9,"column_end":26},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":54527,"byte_end":54544,"line_start":144,"line_end":144,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":128},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":58296,"byte_end":58310,"line_start":238,"line_end":238,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60108,"byte_end":60122,"line_start":292,"line_end":292,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":60960,"byte_end":60974,"line_start":322,"line_end":322,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":160},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7029,"byte_end":7038,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11052,"byte_end":11068,"line_start":323,"line_end":323,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14184,"byte_end":14196,"line_start":413,"line_end":413,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,109,103,117,105,109,97,114,97,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,110,102,108,97,116,101,45,48,46,52,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19854,"byte_end":19867,"line_start":562,"line_end":562,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":252},"to":{"krate":4294967295,"index":4294967295}}]}